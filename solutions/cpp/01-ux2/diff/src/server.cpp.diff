@@ -1,46 +1,43 @@
 #include <cstring>
 #include <iostream>
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <unistd.h>

 int main() {
   // Flush after every std::cout / std::cerr
   std::cout << std::unitbuf;
   std::cerr << std::unitbuf;

   // Disable output buffering
   setbuf(stdout, NULL);

-  // You can use print statements as follows for debugging, they'll be visible
-  // when running tests.
   std::cout << "Logs from your program will appear here!" << std::endl;

-  // Uncomment this block to pass the first stage
-  // int udpSocket;
-  // struct sockaddr_in clientAddress;
+  int udpSocket;
+  struct sockaddr_in clientAddress;

   // udpSocket = socket(AF_INET, SOCK_DGRAM, 0);
   // if (udpSocket == -1) {
   //   std::cerr << "Socket creation failed: " << strerror(errno) << "..."
   //             << std::endl;
   //   return 1;
   // }

   // // Since the tester restarts your program quite often, setting
   // REUSE_PORT
   // // ensures that we don't run into 'Address already in use' errors
   // int reuse = 1;
   // if (setsockopt(udpSocket, SOL_SOCKET, SO_REUSEPORT, &reuse, sizeof(reuse))
   // <
   //     0) {
   //   std::cerr << "SO_REUSEPORT failed: " << strerror(errno) << std::endl;
   //   return 1;
   // }

   // sockaddr_in serv_addr = {
   //     .sin_family = AF_INET,
   //     .sin_port = htons(2053),
   //     .sin_addr = {htonl(INADDR_ANY)},
   // };

